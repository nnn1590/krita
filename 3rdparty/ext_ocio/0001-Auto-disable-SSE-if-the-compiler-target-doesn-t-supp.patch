From 61b15378f64519c2175e6dcbcb4dfca67b104679 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <13498015+amyspark@users.noreply.github.com>
Date: Tue, 24 Mar 2020 22:58:02 -0300
Subject: [PATCH] Auto-disable SSE if the compiler target doesn't support it
 (#970)

* Auto-disable SSE if the compiler target doesn't support it

This allows non-x86 targets to compile out of the box.

Fixes #940

Signed-off-by: L. E. Segovia <13498015+amyspark@users.noreply.github.com>

* Typo fix

Signed-off-by: L. E. Segovia <13498015+amyspark@users.noreply.github.com>

* Drop legacy CMake if() syntax

Signed-off-by: L. E. Segovia <13498015+amyspark@users.noreply.github.com>
(cherry picked from commit 31d131d821a4a96d6042517bf47590ce428ab479)
---
 CMakeLists.txt                     |  6 ++++++
 share/cmake/CheckSSEFeatures.cmake | 27 +++++++++++++++++++++++++++
 2 files changed, 33 insertions(+)
 create mode 100644 share/cmake/CheckSSEFeatures.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 31275467..2033e5af 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -383,6 +383,12 @@ if(YAML_CPP_VERSION VERSION_LESS "0.5.0")
     set(YAML_CPP_COMPILE_FLAGS "-DOLDYAML")
 endif()
 
+include(CheckSSEFeatures)
+if(NOT HAVE_SSE2)
+	message(STATUS "Disabling SSE optimizations, as the target doesn't support them")
+	set(OCIO_USE_SSE OFF)
+endif(NOT HAVE_SSE2)
+
 ###############################################################################
 ### Externals ###
 
diff --git a/share/cmake/CheckSSEFeatures.cmake b/share/cmake/CheckSSEFeatures.cmake
new file mode 100644
index 00000000..5d8a5e49
--- /dev/null
+++ b/share/cmake/CheckSSEFeatures.cmake
@@ -0,0 +1,27 @@
+# SPDX-License-Identifier: BSD-3-Clause
+# Copyright Contributors to the OpenColorIO Project.
+
+include(CheckCXXSourceCompiles)
+
+if (NOT CMAKE_SIZE_OF_VOID_P EQUAL 8)
+    if (MSVC)
+        set(CMAKE_REQUIRED_FLAGS "/arch:SSE2")
+    else ()
+        set(CMAKE_REQUIRED_FLAGS "-msse2")
+    endif ()
+endif (NOT CMAKE_SIZE_OF_VOID_P EQUAL 8)
+
+check_cxx_source_compiles ("
+    #include <emmintrin.h>
+    int main ()
+    {
+        __m128d a, b;
+        double vals[2] = {0};
+        a = _mm_loadu_pd (vals);
+        b = _mm_add_pd (a,a);
+        _mm_storeu_pd (vals,b);
+        return (0);
+    }"
+    HAVE_SSE2)
+
+MARK_AS_ADVANCED (HAVE_SSE2)
-- 
2.30.0

