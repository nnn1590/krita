From da96bead3af1bfc9c808ac4774597be0bbe2fb9e Mon Sep 17 00:00:00 2001
From: Sharaf Zaman <sharafzaz121@gmail.com>
Date: Mon, 1 Jun 2020 00:05:25 +0530
Subject: [PATCH 2/2] Android: return the actual file name the URI is pointing
 to

This only manages QFileInfo::filename() and QFileInfo::suffix().

Change-Id: Iec527e2a6808f04dca25fd17e82e8d2aa7e45cfc
---
 .../org/qtproject/qt5/android/QtNative.java   | 24 +++++++++++
 src/corelib/io/qfileinfo.cpp                  | 11 +++++
 .../android/androidcontentfileengine.cpp      | 42 ++++++++++++++-----
 .../android/androidcontentfileengine.h        |  5 ++-
 4 files changed, 70 insertions(+), 12 deletions(-)

diff --git a/src/android/jar/src/org/qtproject/qt5/android/QtNative.java b/src/android/jar/src/org/qtproject/qt5/android/QtNative.java
index b5d2b9e6a6..4282f73638 100644
--- a/src/android/jar/src/org/qtproject/qt5/android/QtNative.java
+++ b/src/android/jar/src/org/qtproject/qt5/android/QtNative.java
@@ -290,6 +290,30 @@ public class QtNative
         }
     }
 
+    public static String getFileNameFromUri(Context context, String contentUrl)
+    {
+        Uri uri = getUriWithValidPermission(context, contentUrl, "r");
+        if (uri == null) {
+            Log.e(QtTAG, "getFileNameFromUri(): No permissions to open Uri");
+            return null;
+        }
+
+        String filename = null;
+        try {
+            Cursor cursor = context.getContentResolver().query(uri, null, null, null, null);
+            if (cursor != null) {
+                if (cursor.moveToFirst()) {
+                    filename = cursor.getString(cursor.getColumnIndexOrThrow(OpenableColumns.DISPLAY_NAME));
+                }
+                cursor.close();
+            }
+        } catch (IllegalArgumentException e) {
+            Log.e(QtTAG, "getFileNameFromUri(): Couldn't get filename");
+        }
+
+        return filename;
+    }
+
     // this method loads full path libs
     public static void loadQtLibraries(final ArrayList<String> libraries)
     {
diff --git a/src/corelib/io/qfileinfo.cpp b/src/corelib/io/qfileinfo.cpp
index 185e061d8f..189b704b51 100644
--- a/src/corelib/io/qfileinfo.cpp
+++ b/src/corelib/io/qfileinfo.cpp
@@ -757,6 +757,12 @@ QString QFileInfo::fileName() const
     Q_D(const QFileInfo);
     if (d->isDefaultConstructed)
         return QLatin1String("");
+#ifdef Q_OS_ANDROID
+    if (d->fileEntry.filePath().startsWith("content:") && d->fileEngine) {
+        QString fname = d->fileEngine->fileName();
+        return fname;
+    }
+#endif
     return d->fileEntry.fileName();
 }
 
@@ -862,6 +868,11 @@ QString QFileInfo::suffix() const
     Q_D(const QFileInfo);
     if (d->isDefaultConstructed)
         return QLatin1String("");
+
+#ifdef Q_OS_ANDROID
+    QString fname = fileName();
+    return fname.split(".").last();
+#endif
     return d->fileEntry.suffix();
 }
 
diff --git a/src/plugins/platforms/android/androidcontentfileengine.cpp b/src/plugins/platforms/android/androidcontentfileengine.cpp
index 6351b642ae..31f68780df 100644
--- a/src/plugins/platforms/android/androidcontentfileengine.cpp
+++ b/src/plugins/platforms/android/androidcontentfileengine.cpp
@@ -45,9 +45,10 @@
 #include <QDebug>
 
 AndroidContentFileEngine::AndroidContentFileEngine(const QString &f)
-    : m_file(f)
+    : m_file(f), m_resolvedName(QString())
 {
     setFileName(f);
+    setResolvedFileName(f);
 }
 
 bool AndroidContentFileEngine::open(QIODevice::OpenMode openMode)
@@ -69,7 +70,7 @@ bool AndroidContentFileEngine::open(QIODevice::OpenMode openMode)
         "openFdForContentUrl",
         "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)I",
         QtAndroidPrivate::context(),
-        QJNIObjectPrivate::fromString(fileName(DefaultName)).object(),
+        QJNIObjectPrivate::fromString(m_file).object(),
         QJNIObjectPrivate::fromString(openModeStr).object());
 
     if (fd < 0) {
@@ -84,7 +85,7 @@ qint64 AndroidContentFileEngine::size() const
     const jlong size = QJNIObjectPrivate::callStaticMethod<jlong>(
             "org/qtproject/qt5/android/QtNative", "getSize",
             "(Landroid/content/Context;Ljava/lang/String;)J", QtAndroidPrivate::context(),
-            QJNIObjectPrivate::fromString(fileName(DefaultName)).object());
+            QJNIObjectPrivate::fromString(m_file).object());
     return (qint64)size;
 }
 
@@ -95,7 +96,7 @@ AndroidContentFileEngine::FileFlags AndroidContentFileEngine::fileFlags(FileFlag
     const bool exists = QJNIObjectPrivate::callStaticMethod<jboolean>(
             "org/qtproject/qt5/android/QtNative", "checkFileExists",
             "(Landroid/content/Context;Ljava/lang/String;)Z", QtAndroidPrivate::context(),
-            QJNIObjectPrivate::fromString(fileName(DefaultName)).object());
+            QJNIObjectPrivate::fromString(m_file).object());
     if (!exists)
         return flags;
     flags = FileType | commonFlags;
@@ -105,23 +106,42 @@ AndroidContentFileEngine::FileFlags AndroidContentFileEngine::fileFlags(FileFlag
 QString AndroidContentFileEngine::fileName(FileName f) const
 {
     switch (f) {
+        case DefaultName: {
+            return m_resolvedName;
+        }
         case PathName:
-        case AbsolutePathName:
-        case CanonicalPathName:
-        case DefaultName:
         case AbsoluteName:
+        case AbsolutePathName:
         case CanonicalName:
+        case CanonicalPathName:
             return m_file;
-        case BaseName:
-        {
-            const int pos = m_file.lastIndexOf(QChar(QLatin1Char('/')));
-            return m_file.mid(pos);
+
+        case BaseName: {
+            const int pos = m_resolvedName.lastIndexOf(QChar(QLatin1Char('/')));
+            return m_resolvedName.mid(pos);
         }
         default:
             return QString();
     }
 }
 
+void AndroidContentFileEngine::setResolvedFileName(const QString& uri)
+{
+    QJNIObjectPrivate resolvedName = QJNIObjectPrivate::callStaticObjectMethod(
+        "org/qtproject/qt5/android/QtNative",
+        "getFileNameFromUri",
+        "(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;",
+        QtAndroidPrivate::context(),
+        QJNIObjectPrivate::fromString(uri).object());
+
+    if (resolvedName.isValid()) {
+        m_resolvedName = resolvedName.toString();
+    } else {
+        qWarning("setResolvedFileName: Couldn't resolve the URI");
+    }
+}
+
+
 AndroidContentFileEngineHandler::AndroidContentFileEngineHandler() = default;
 AndroidContentFileEngineHandler::~AndroidContentFileEngineHandler() = default;
 
diff --git a/src/plugins/platforms/android/androidcontentfileengine.h b/src/plugins/platforms/android/androidcontentfileengine.h
index 09e5d77553..bb97bd6975 100644
--- a/src/plugins/platforms/android/androidcontentfileengine.h
+++ b/src/plugins/platforms/android/androidcontentfileengine.h
@@ -50,9 +50,12 @@ public:
     qint64 size() const override;
     FileFlags fileFlags(FileFlags type = FileInfoAll) const override;
     QString fileName(FileName file = DefaultName) const override;
+
+    /// Resolves the URI to the actual filename
+    void setResolvedFileName(const QString& uri);
 private:
     QString m_file;
-
+    QString m_resolvedName;
 };
 
 class AndroidContentFileEngineHandler : public QAbstractFileEngineHandler
-- 
2.26.2

