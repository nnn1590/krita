From 266f6239f6d753b6f1218542041d316184cda596 Mon Sep 17 00:00:00 2001
From: Dmitry Kazakov <dimula73@gmail.com>
Date: Sat, 13 Apr 2019 23:24:01 +0300
Subject: [PATCH 07/22] Fetch mapped screen size from the Wintab driver

Some devices, like Microsoft Surface Pro 5, don't map tablet's
input range to the entire virtual screen area, but map it to
the primary display that has actual built-in tablet sensor.

In such cases we should fetch actualy mapped aread from Wintab's
lcSys{Org,Ext}{X,Y} fields and use it for cursor mapping.

If one wants to fall back to the old screen size detection method,
then an environment variable can be set:

QT_IGNORE_WINTAB_MAPPING=1

When the variable is set, the scaling is done via virtual desktop
area only.

If the tablet driver is broken (e.g. Microsoft SP5, when primary
display is set to an external monitor) the user might want to override
mapping completely. Then the following variable can be used:

QT_WINTAB_DESKTOP_RECT=x;y;width;height

Change-Id: Idd8bcf0323ce0811d2ad8976eaed48ad13ac3af8
---
 .../windows/qwindowstabletsupport.cpp         | 89 ++++++++++++++++++-
 .../platforms/windows/qwindowstabletsupport.h | 13 ++-
 2 files changed, 99 insertions(+), 3 deletions(-)

diff --git a/src/plugins/platforms/windows/qwindowstabletsupport.cpp b/src/plugins/platforms/windows/qwindowstabletsupport.cpp
index 6a9fe28e75..bfd0a9640b 100644
--- a/src/plugins/platforms/windows/qwindowstabletsupport.cpp
+++ b/src/plugins/platforms/windows/qwindowstabletsupport.cpp
@@ -53,6 +53,7 @@
 #include <QtCore/qdebug.h>
 #include <QtCore/qvarlengtharray.h>
 #include <QtCore/qmath.h>
+#include <QtCore/qregularexpression.h>
 
 #include <private/qguiapplication_p.h>
 #include <QtCore/private/qsystemlibrary_p.h>
@@ -216,6 +217,10 @@ QWindowsTabletSupport::QWindowsTabletSupport(HWND window, HCTX context)
     // Some tablets don't support tilt, check if it is possible,
     if (QWindowsTabletSupport::m_winTab32DLL.wTInfo(WTI_DEVICES, DVC_ORIENTATION, &orientation))
         m_tiltSupport = orientation[0].axResolution && orientation[1].axResolution;
+
+    connect(qGuiApp, &QGuiApplication::primaryScreenChanged,
+            this, QWindowsTabletSupport::slotPrimaryScreenChanged);
+    slotScreenGeometryChanged();
 }
 
 QWindowsTabletSupport::~QWindowsTabletSupport()
@@ -394,6 +399,84 @@ QWindowsTabletDeviceData QWindowsTabletSupport::tabletInit(qint64 uniqueId, UINT
     return result;
 }
 
+void QWindowsTabletSupport::slotPrimaryScreenChanged(QScreen *screen)
+{
+    if (m_connectedScreen)
+        disconnect(m_connectedScreen, 0, this, 0);
+
+    m_connectedScreen = screen;
+
+    if (m_connectedScreen)
+        connect(m_connectedScreen, &QScreen::virtualGeometryChanged,
+                this, &QWindowsTabletSupport::slotScreenGeometryChanged);
+
+    slotScreenGeometryChanged();
+}
+
+void QWindowsTabletSupport::slotScreenGeometryChanged()
+{
+    /**
+     * Some Wintab implementations map the tablet area to the entire
+     * virtual screen, but others (e.g. Microsoft SP5) don't. They
+     * may input range to a single (built-in) screen. The logic is
+     * quite obvious: when the screen has integrated tablet device,
+     * one cannot map this tablet device to another display.
+     *
+     * For such devices, we should always request mapped area from
+     * lcSys{Org,Ext}{X,Y} fields and use it accordingly.
+     */
+
+    LOGCONTEXT lc;
+    QWindowsTabletSupport::m_winTab32DLL.wTInfo(WTI_DEFSYSCTX, 0, &lc);
+    m_wintabScreenGeometry = QRect(lc.lcSysOrgX, lc.lcSysOrgY, lc.lcSysExtX, lc.lcSysExtY);
+
+    qCDebug(lcQpaTablet) << "Updated tablet mapping: " << m_wintabScreenGeometry;
+    if (QGuiApplication::primaryScreen()) {
+        qCDebug(lcQpaTablet) << "   real desktop geometry: " << QWindowsScreen::virtualGeometry(QGuiApplication::primaryScreen()->handle());
+    }
+}
+
+void QWindowsTabletSupport::updateEffectiveScreenGeometry()
+{
+    QRect customGeometry;
+    bool dontUseWintabDesktopRect = false;
+
+    const QString geometry = qEnvironmentVariable("QT_WINTAB_DESKTOP_RECT");
+    if (!geometry.isEmpty()) {
+        QString tmp = QString::fromLatin1("([+-]?\\d+);([+-]?\\d+);(\\d+);(\\d+)");
+
+        QRegularExpression rex(tmp);
+        QRegularExpressionMatch match = rex.match(geometry);
+
+        if (match.hasMatch()) {
+            customGeometry.setRect(match.captured(1).toInt(),
+                                   match.captured(2).toInt(),
+                                   match.captured(3).toInt(),
+                                   match.captured(4).toInt());
+
+            qCDebug(lcQpaTablet) << "apply QT_WINTAB_DESKTOP_RECT:" << customGeometry;
+        } else {
+            qCWarning(lcQpaTablet) << "failed to parse QT_WINTAB_DESKTOP_RECT:" << geometry;
+        }
+    }
+
+    if (qEnvironmentVariableIsSet("QT_IGNORE_WINTAB_MAPPING")) {
+        if (!customGeometry.isValid()) {
+            qCDebug(lcQpaTablet) << "fallback mapping is requested via QT_IGNORE_WINTAB_MAPPING";
+        } else {
+            qCWarning(lcQpaTablet) << "ignoring QT_IGNORE_WINTAB_MAPPING, because QT_WINTAB_DESKTOP_RECT is set";
+        }
+        dontUseWintabDesktopRect = true;
+    }
+
+    m_effectiveScreenGeometry =
+        !customGeometry.isValid() ?
+        (dontUseWintabDesktopRect ?
+             QWindowsScreen::virtualGeometry(QGuiApplication::primaryScreen()->handle()) :
+             m_wintabScreenGeometry) :
+        customGeometry;
+}
+
 bool QWindowsTabletSupport::translateTabletProximityEvent(WPARAM /* wParam */, LPARAM lParam)
 {
     PACKET proximityBuffer[1]; // we are only interested in the first packet in this case
@@ -421,6 +504,8 @@ bool QWindowsTabletSupport::translateTabletProximityEvent(WPARAM /* wParam */, L
     if (!totalPacks)
         return false;
 
+    updateEffectiveScreenGeometry();
+
     const UINT currentCursor = proximityBuffer[0].pkCursor;
     UINT physicalCursorId;
     QWindowsTabletSupport::m_winTab32DLL.wTInfo(WTI_CURSORS + currentCursor, CSR_PHYSID, &physicalCursorId);
@@ -537,8 +622,8 @@ bool QWindowsTabletSupport::translateTabletPacketEvent()
     //    in which case we snap the position to the mouse position.
     // It seems there is no way to find out the mode programmatically, the LOGCONTEXT orgX/Y/Ext
     // area is always the virtual desktop.
-    const QRect virtualDesktopArea =
-        QWindowsScreen::virtualGeometry(QGuiApplication::primaryScreen()->handle());
+
+    const QRect virtualDesktopArea = m_effectiveScreenGeometry;
 
     if (QWindowsContext::verbose > 1)  {
         qCDebug(lcQpaTablet) << __FUNCTION__ << "processing" << packetCount
diff --git a/src/plugins/platforms/windows/qwindowstabletsupport.h b/src/plugins/platforms/windows/qwindowstabletsupport.h
index 8f97982308..fe7e7815d6 100644
--- a/src/plugins/platforms/windows/qwindowstabletsupport.h
+++ b/src/plugins/platforms/windows/qwindowstabletsupport.h
@@ -45,7 +45,9 @@
 
 #include <QtCore/qvector.h>
 #include <QtCore/qpoint.h>
+#include <QtCore/qrect.h>
 #include <QtCore/qhash.h>
+#include <QtCore/qobject.h>
 
 #include <wintab.h>
 
@@ -56,6 +58,7 @@ QT_BEGIN_NAMESPACE
 class QDebug;
 class QWindow;
 class QRect;
+class QScreen;
 
 struct QWindowsWinTab32DLL
 {
@@ -108,7 +111,7 @@ struct QWindowsTabletDeviceData
 QDebug operator<<(QDebug d, const QWindowsTabletDeviceData &t);
 #endif
 
-class QWindowsTabletSupport
+class QWindowsTabletSupport : public QObject
 {
     Q_DISABLE_COPY(QWindowsTabletSupport)
 
@@ -141,9 +144,14 @@ public:
     int absoluteRange() const { return m_absoluteRange; }
     void setAbsoluteRange(int a) { m_absoluteRange = a; }
 
+private Q_SLOTS:
+    void slotPrimaryScreenChanged(QScreen *screen);
+    void slotScreenGeometryChanged();
+
 private:
     unsigned options() const;
     QWindowsTabletDeviceData tabletInit(qint64 uniqueId, UINT cursorType) const;
+    void updateEffectiveScreenGeometry();
 
     static QWindowsWinTab32DLL m_winTab32DLL;
     const HWND m_window;
@@ -154,6 +162,9 @@ private:
     int m_currentDevice = -1;
     Mode m_mode = PenMode;
     State m_state = PenUp;
+    QScreen *m_connectedScreen = 0;
+    QRect m_wintabScreenGeometry;
+    QRect m_effectiveScreenGeometry;
 };
 
 QT_END_NAMESPACE
-- 
2.20.1.windows.1

