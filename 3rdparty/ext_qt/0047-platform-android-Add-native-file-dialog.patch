From 2d1382faeaafa3005b5aad51120833186049e1ce Mon Sep 17 00:00:00 2001
From: Nicolas Fella <nicolas.fella@kdab.com>
Date: Wed, 30 Jan 2019 14:13:12 +0100
Subject: [PATCH 1/8] [platform/android] Add native file dialog

Add basic native file open dialog on Android. Not all features of QFileDialog can be mapped to the
Android file dialog.

Most notably there is no "Save" dialog. The dialog returns a content:// URL. Patch 251038 adds
support for those to QFile.

Change-Id: I13d02103edcd9a089afcce8193432f24b2e0fe43
Reviewed-by: BogDan Vatra <bogdan@kdab.com>
---
 src/plugins/platforms/android/android.pro     |   6 +-
 .../qandroidplatformfiledialoghelper.cpp      | 149 ++++++++++++++++++
 .../qandroidplatformfiledialoghelper.h        |  81 ++++++++++
 .../android/qandroidplatformtheme.cpp         |   5 +
 4 files changed, 239 insertions(+), 2 deletions(-)
 create mode 100644 src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
 create mode 100644 src/plugins/platforms/android/qandroidplatformfiledialoghelper.h

diff --git a/src/plugins/platforms/android/android.pro b/src/plugins/platforms/android/android.pro
index 940bd5fc55..78632a9bea 100644
--- a/src/plugins/platforms/android/android.pro
+++ b/src/plugins/platforms/android/android.pro
@@ -47,7 +47,8 @@ SOURCES += $$PWD/androidplatformplugin.cpp \
            $$PWD/qandroidplatformopenglcontext.cpp \
            $$PWD/qandroidplatformforeignwindow.cpp \
            $$PWD/qandroideventdispatcher.cpp \
-           $$PWD/qandroidplatformoffscreensurface.cpp
+           $$PWD/qandroidplatformoffscreensurface.cpp \
+           $$PWD/qandroidplatformfiledialoghelper.cpp
 
 HEADERS += $$PWD/qandroidplatformintegration.h \
            $$PWD/androidcontentfileengine.h \
@@ -77,7 +78,8 @@ HEADERS += $$PWD/qandroidplatformintegration.h \
            $$PWD/qandroidplatformopenglcontext.h \
            $$PWD/qandroidplatformforeignwindow.h \
            $$PWD/qandroideventdispatcher.h \
-           $$PWD/qandroidplatformoffscreensurface.h
+           $$PWD/qandroidplatformoffscreensurface.h \
+           $$PWD/qandroidplatformfiledialoghelper.h
 
 qtConfig(android-style-assets): SOURCES += $$PWD/extract.cpp
 else: SOURCES += $$PWD/extract-dummy.cpp
diff --git a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
new file mode 100644
index 0000000000..4fb271a75c
--- /dev/null
+++ b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
@@ -0,0 +1,149 @@
+/****************************************************************************
+**
+** Copyright (C) 2019 Klaralvdalens Datakonsult AB (KDAB)
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the plugins of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qandroidplatformfiledialoghelper.h"
+
+#include <androidjnimain.h>
+#include <private/qjni_p.h>
+#include <jni.h>
+
+QT_BEGIN_NAMESPACE
+
+namespace QtAndroidFileDialogHelper {
+
+#define RESULT_OK -1
+#define REQUEST_CODE 1305 // Arbitrary
+
+QAndroidPlatformFileDialogHelper::QAndroidPlatformFileDialogHelper()
+    : QPlatformFileDialogHelper()
+    , m_selectedFile()
+{
+}
+
+bool QAndroidPlatformFileDialogHelper::handleActivityResult(jint requestCode, jint resultCode, jobject data)
+{
+    if (requestCode != REQUEST_CODE)
+        return false;
+
+    if (resultCode == RESULT_OK) {
+        const QJNIObjectPrivate intent = QJNIObjectPrivate::fromLocalRef(data);
+        const QJNIObjectPrivate uri = intent.callObjectMethod("getData", "()Landroid/net/Uri;");
+        const QString uriStr = uri.callObjectMethod("toString", "()Ljava/lang/String;").toString();
+        m_selectedFile = QUrl(uriStr);
+        Q_EMIT fileSelected(m_selectedFile);
+        Q_EMIT accept();
+    } else {
+        Q_EMIT reject();
+    }
+
+    return true;
+}
+
+bool QAndroidPlatformFileDialogHelper::show(Qt::WindowFlags windowFlags, Qt::WindowModality windowModality, QWindow *parent)
+{
+    Q_UNUSED(windowFlags)
+    Q_UNUSED(windowModality)
+    Q_UNUSED(parent)
+
+    if (options()->fileMode() != QFileDialogOptions::FileMode::ExistingFile)
+        return false;
+
+    QtAndroidPrivate::registerActivityResultListener(this);
+
+    const QJNIObjectPrivate ACTION_OPEN_DOCUMENT = QJNIObjectPrivate::getStaticObjectField("android/content/Intent", "ACTION_OPEN_DOCUMENT", "Ljava/lang/String;");
+    QJNIObjectPrivate intent("android/content/Intent", "(Ljava/lang/String;)V", ACTION_OPEN_DOCUMENT.object());
+    const QJNIObjectPrivate CATEGORY_OPENABLE = QJNIObjectPrivate::getStaticObjectField("android/content/Intent", "CATEGORY_OPENABLE", "Ljava/lang/String;");
+    intent.callObjectMethod("addCategory", "(Ljava/lang/String;)Landroid/content/Intent;", CATEGORY_OPENABLE.object());
+    intent.callObjectMethod("setType", "(Ljava/lang/String;)Landroid/content/Intent;", QJNIObjectPrivate::fromString(QStringLiteral("*/*")).object());
+
+    const QJNIObjectPrivate activity(QtAndroid::activity());
+    activity.callMethod<void>("startActivityForResult", "(Landroid/content/Intent;I)V", intent.object(), REQUEST_CODE);
+
+    return true;
+}
+
+void QAndroidPlatformFileDialogHelper::exec()
+{
+}
+
+void QAndroidPlatformFileDialogHelper::hide()
+{
+}
+
+QString QAndroidPlatformFileDialogHelper::selectedNameFilter() const
+{
+    return QString();
+}
+
+void QAndroidPlatformFileDialogHelper::selectNameFilter(const QString &filter)
+{
+    Q_UNUSED(filter)
+}
+
+void QAndroidPlatformFileDialogHelper::setFilter()
+{
+}
+
+QList<QUrl> QAndroidPlatformFileDialogHelper::selectedFiles() const
+{
+    return {m_selectedFile};
+}
+
+void QAndroidPlatformFileDialogHelper::selectFile(const QUrl &file)
+{
+    Q_UNUSED(file)
+}
+
+QUrl QAndroidPlatformFileDialogHelper::directory() const
+{
+    return QUrl();
+}
+
+void QAndroidPlatformFileDialogHelper::setDirectory(const QUrl &directory)
+{
+    Q_UNUSED(directory)
+}
+
+bool QAndroidPlatformFileDialogHelper::defaultNameFilterDisables() const
+{
+    return false;
+}
+}
+
+QT_END_NAMESPACE
diff --git a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h
new file mode 100644
index 0000000000..e445aa2fef
--- /dev/null
+++ b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h
@@ -0,0 +1,81 @@
+/****************************************************************************
+**
+** Copyright (C) 2019 Klaralvdalens Datakonsult AB (KDAB)
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the plugins of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QANDROIDPLATFORMFILEDIALOGHELPER_H
+#define QANDROIDPLATFORMFILEDIALOGHELPER_H
+
+#include <jni.h>
+#include <qpa/qplatformdialoghelper.h>
+#include <QtCore/private/qjnihelpers_p.h>
+
+QT_BEGIN_NAMESPACE
+
+namespace QtAndroidFileDialogHelper {
+
+class QAndroidPlatformFileDialogHelper: public QPlatformFileDialogHelper, public QtAndroidPrivate::ActivityResultListener
+{
+    Q_OBJECT
+
+public:
+    QAndroidPlatformFileDialogHelper();
+    void exec() override;
+
+    bool show(Qt::WindowFlags windowFlags,
+              Qt::WindowModality windowModality,
+              QWindow *parent) override;
+    void hide() override;
+
+    QString selectedNameFilter() const override;
+    void selectNameFilter(const QString &filter) override;
+    void setFilter() override;
+    QList<QUrl> selectedFiles() const override;
+    void selectFile(const QUrl &file) override;
+    QUrl directory() const override;
+    void setDirectory(const QUrl &directory) override;
+    bool defaultNameFilterDisables() const override;
+    bool handleActivityResult(jint requestCode, jint resultCode, jobject data) override;
+
+private:
+    QUrl m_selectedFile;
+};
+
+}
+QT_END_NAMESPACE
+
+#endif // QANDROIDPLATFORMFILEDIALOGHELPER_H
diff --git a/src/plugins/platforms/android/qandroidplatformtheme.cpp b/src/plugins/platforms/android/qandroidplatformtheme.cpp
index 8d98d4ba8d..d3a8a53241 100644
--- a/src/plugins/platforms/android/qandroidplatformtheme.cpp
+++ b/src/plugins/platforms/android/qandroidplatformtheme.cpp
@@ -44,6 +44,7 @@
 #include "qandroidplatformmenu.h"
 #include "qandroidplatformmenuitem.h"
 #include "qandroidplatformdialoghelpers.h"
+#include "qandroidplatformfiledialoghelper.h"
 
 #include <QCoreApplication>
 #include <QDebug>
@@ -513,6 +514,8 @@ bool QAndroidPlatformTheme::usePlatformNativeDialog(QPlatformTheme::DialogType t
 {
     if (type == MessageDialog)
         return qEnvironmentVariableIntValue("QT_USE_ANDROID_NATIVE_DIALOGS") == 1;
+    if (type == FileDialog)
+        return true;
     return false;
 }
 
@@ -521,6 +524,8 @@ QPlatformDialogHelper *QAndroidPlatformTheme::createPlatformDialogHelper(QPlatfo
     switch (type) {
     case MessageDialog:
         return new QtAndroidDialogHelpers::QAndroidPlatformMessageDialogHelper;
+    case FileDialog:
+        return new QtAndroidFileDialogHelper::QAndroidPlatformFileDialogHelper;
     default:
         return 0;
     }
-- 
2.28.0


From f78eae67265b9466d7aec2d2feea2a7c0702c825 Mon Sep 17 00:00:00 2001
From: Assam Boudjelthia <assam.boudjelthia@qt.io>
Date: Fri, 31 Jan 2020 17:04:54 +0200
Subject: [PATCH 2/8] Android: Fix native open fileDialog crash on Android

Unregister the ActivityResultListener() after the result is handled.

Fixes: QTBUG-78912
Change-Id: Ia2b45eca002e854492c409c70a3876fa8ce98de1
Reviewed-by: Andy Shaw <andy.shaw@qt.io>
---
 .../platforms/android/qandroidplatformfiledialoghelper.cpp       | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
index 4fb271a75c..7585b7eb95 100644
--- a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
+++ b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
@@ -104,6 +104,7 @@ void QAndroidPlatformFileDialogHelper::exec()
 
 void QAndroidPlatformFileDialogHelper::hide()
 {
+    QtAndroidPrivate::unregisterActivityResultListener(this);
 }
 
 QString QAndroidPlatformFileDialogHelper::selectedNameFilter() const
-- 
2.28.0


From bd97157483112d78adc003f9d42d429a7962fe36 Mon Sep 17 00:00:00 2001
From: Assam Boudjelthia <assam.boudjelthia@qt.io>
Date: Fri, 31 Jan 2020 17:04:54 +0200
Subject: [PATCH 3/8] Android: Fix native fileDialog not waiting for user
 selection

Add an event loop to wait for user file selection in native fileDialog

Task-number: QTBUG-77214
Change-Id: I3d97d6c3f46cf2a8ed0ee6f98e555e8d62e12cc3
Reviewed-by: Ville Voutilainen <ville.voutilainen@qt.io>
Reviewed-by: Andy Shaw <andy.shaw@qt.io>
---
 .../platforms/android/qandroidplatformfiledialoghelper.cpp     | 3 +++
 .../platforms/android/qandroidplatformfiledialoghelper.h       | 2 ++
 2 files changed, 5 insertions(+)

diff --git a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
index 7585b7eb95..fb979ab6cc 100644
--- a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
+++ b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
@@ -100,10 +100,13 @@ bool QAndroidPlatformFileDialogHelper::show(Qt::WindowFlags windowFlags, Qt::Win
 
 void QAndroidPlatformFileDialogHelper::exec()
 {
+    m_eventLoop.exec(QEventLoop::DialogExec);
 }
 
 void QAndroidPlatformFileDialogHelper::hide()
 {
+    if (m_eventLoop.isRunning())
+        m_eventLoop.exit();
     QtAndroidPrivate::unregisterActivityResultListener(this);
 }
 
diff --git a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h
index e445aa2fef..5cd26af7c9 100644
--- a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h
+++ b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h
@@ -41,6 +41,7 @@
 #define QANDROIDPLATFORMFILEDIALOGHELPER_H
 
 #include <jni.h>
+#include <QEventLoop>
 #include <qpa/qplatformdialoghelper.h>
 #include <QtCore/private/qjnihelpers_p.h>
 
@@ -72,6 +73,7 @@ public:
     bool handleActivityResult(jint requestCode, jint resultCode, jobject data) override;
 
 private:
+    QEventLoop m_eventLoop;
     QUrl m_selectedFile;
 };
 
-- 
2.28.0


From cd227657696ff1dc01d6391360ea6e3f6daeb1f1 Mon Sep 17 00:00:00 2001
From: Assam Boudjelthia <assam.boudjelthia@qt.io>
Date: Tue, 28 Jan 2020 16:04:06 +0200
Subject: [PATCH 4/8] Android: fully integrate native file dialog

Allow Qt to use native file dialog to open (file, multiple files,
directory) and save a file.

Due to changes in file permission in Android 10, proper permissions
tokens are granted after selecting a file or directory.

[ChangeLog][Android] Use native file dialog by default for open and save
operations.

Task-number: QTBUG-82120
Fixes: QTBUG-75484
Change-Id: I92c9d08e0f214a57c4b3880fbd948adbabe39694
Reviewed-by: Eskil Abrahamsen Blomfeldt <eskil.abrahamsen-blomfeldt@qt.io>
---
 .../qandroidplatformfiledialoghelper.cpp      | 176 +++++++++++++-----
 .../qandroidplatformfiledialoghelper.h        |  36 ++--
 2 files changed, 148 insertions(+), 64 deletions(-)

diff --git a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
index fb979ab6cc..7b5f2f16f8 100644
--- a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
+++ b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
@@ -40,7 +40,6 @@
 #include "qandroidplatformfiledialoghelper.h"
 
 #include <androidjnimain.h>
-#include <private/qjni_p.h>
 #include <jni.h>
 
 QT_BEGIN_NAMESPACE
@@ -50,9 +49,11 @@ namespace QtAndroidFileDialogHelper {
 #define RESULT_OK -1
 #define REQUEST_CODE 1305 // Arbitrary
 
+const char JniIntentClass[] = "android/content/Intent";
+
 QAndroidPlatformFileDialogHelper::QAndroidPlatformFileDialogHelper()
-    : QPlatformFileDialogHelper()
-    , m_selectedFile()
+    : QPlatformFileDialogHelper(),
+      m_activity(QtAndroid::activity())
 {
 }
 
@@ -61,92 +62,165 @@ bool QAndroidPlatformFileDialogHelper::handleActivityResult(jint requestCode, ji
     if (requestCode != REQUEST_CODE)
         return false;
 
-    if (resultCode == RESULT_OK) {
-        const QJNIObjectPrivate intent = QJNIObjectPrivate::fromLocalRef(data);
-        const QJNIObjectPrivate uri = intent.callObjectMethod("getData", "()Landroid/net/Uri;");
-        const QString uriStr = uri.callObjectMethod("toString", "()Ljava/lang/String;").toString();
-        m_selectedFile = QUrl(uriStr);
-        Q_EMIT fileSelected(m_selectedFile);
-        Q_EMIT accept();
-    } else {
+    if (resultCode != RESULT_OK) {
         Q_EMIT reject();
+        return true;
     }
 
-    return true;
-}
-
-bool QAndroidPlatformFileDialogHelper::show(Qt::WindowFlags windowFlags, Qt::WindowModality windowModality, QWindow *parent)
-{
-    Q_UNUSED(windowFlags)
-    Q_UNUSED(windowModality)
-    Q_UNUSED(parent)
-
-    if (options()->fileMode() != QFileDialogOptions::FileMode::ExistingFile)
-        return false;
+    const QJNIObjectPrivate intent = QJNIObjectPrivate::fromLocalRef(data);
 
-    QtAndroidPrivate::registerActivityResultListener(this);
+    const QJNIObjectPrivate uri = intent.callObjectMethod("getData", "()Landroid/net/Uri;");
+    if (uri.isValid()) {
+        takePersistableUriPermission(uri);
+        m_selectedFile.append(QUrl(uri.toString()));
+        Q_EMIT fileSelected(m_selectedFile.first());
+        Q_EMIT accept();
 
-    const QJNIObjectPrivate ACTION_OPEN_DOCUMENT = QJNIObjectPrivate::getStaticObjectField("android/content/Intent", "ACTION_OPEN_DOCUMENT", "Ljava/lang/String;");
-    QJNIObjectPrivate intent("android/content/Intent", "(Ljava/lang/String;)V", ACTION_OPEN_DOCUMENT.object());
-    const QJNIObjectPrivate CATEGORY_OPENABLE = QJNIObjectPrivate::getStaticObjectField("android/content/Intent", "CATEGORY_OPENABLE", "Ljava/lang/String;");
-    intent.callObjectMethod("addCategory", "(Ljava/lang/String;)Landroid/content/Intent;", CATEGORY_OPENABLE.object());
-    intent.callObjectMethod("setType", "(Ljava/lang/String;)Landroid/content/Intent;", QJNIObjectPrivate::fromString(QStringLiteral("*/*")).object());
+        return true;
+    }
 
-    const QJNIObjectPrivate activity(QtAndroid::activity());
-    activity.callMethod<void>("startActivityForResult", "(Landroid/content/Intent;I)V", intent.object(), REQUEST_CODE);
+    const QJNIObjectPrivate uriClipData =
+            intent.callObjectMethod("getClipData", "()Landroid/content/ClipData;");
+    if (uriClipData.isValid()) {
+        const int size = uriClipData.callMethod<jint>("getItemCount");
+        for (int i = 0; i < size; ++i) {
+            QJNIObjectPrivate item = uriClipData.callObjectMethod(
+                    "getItemAt", "(I)Landroid/content/ClipData$Item;", i);
+
+            QJNIObjectPrivate itemUri = item.callObjectMethod("getUri", "()Landroid/net/Uri;");
+            takePersistableUriPermission(itemUri);
+            m_selectedFile.append(itemUri.toString());
+            Q_EMIT filesSelected(m_selectedFile);
+            Q_EMIT accept();
+        }
+    }
 
     return true;
 }
 
-void QAndroidPlatformFileDialogHelper::exec()
+void QAndroidPlatformFileDialogHelper::takePersistableUriPermission(const QJNIObjectPrivate &uri)
 {
-    m_eventLoop.exec(QEventLoop::DialogExec);
+    int modeFlags = QJNIObjectPrivate::getStaticField<jint>(
+            JniIntentClass, "FLAG_GRANT_READ_URI_PERMISSION");
+
+    if (options()->acceptMode() == QFileDialogOptions::AcceptSave) {
+        modeFlags |= QJNIObjectPrivate::getStaticField<jint>(
+                JniIntentClass, "FLAG_GRANT_WRITE_URI_PERMISSION");
+    }
+
+    QJNIObjectPrivate contentResolver = m_activity.callObjectMethod(
+            "getContentResolver", "()Landroid/content/ContentResolver;");
+    contentResolver.callMethod<void>("takePersistableUriPermission", "(Landroid/net/Uri;I)V",
+                                     uri.object(), modeFlags);
 }
 
-void QAndroidPlatformFileDialogHelper::hide()
+void QAndroidPlatformFileDialogHelper::setLocalFilesOnly(bool localOnly)
 {
-    if (m_eventLoop.isRunning())
-        m_eventLoop.exit();
-    QtAndroidPrivate::unregisterActivityResultListener(this);
+    const QJNIObjectPrivate extraLocalOnly = QJNIObjectPrivate::getStaticObjectField(
+            JniIntentClass, "EXTRA_LOCAL_ONLY", "Ljava/lang/String;");
+    m_intent.callObjectMethod("putExtra", "(Ljava/lang/String;Z)Landroid/content/Intent;",
+                              extraLocalOnly.object(), localOnly);
 }
 
-QString QAndroidPlatformFileDialogHelper::selectedNameFilter() const
+void QAndroidPlatformFileDialogHelper::setIntentTitle(const QString &title)
 {
-    return QString();
+    const QJNIObjectPrivate extraTitle = QJNIObjectPrivate::getStaticObjectField(
+            JniIntentClass, "EXTRA_TITLE", "Ljava/lang/String;");
+    m_intent.callObjectMethod("putExtra",
+                              "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;",
+                              extraTitle.object(), QJNIObjectPrivate::fromString(title).object());
 }
 
-void QAndroidPlatformFileDialogHelper::selectNameFilter(const QString &filter)
+void QAndroidPlatformFileDialogHelper::setOpenableCategory()
 {
-    Q_UNUSED(filter)
+    const QJNIObjectPrivate CATEGORY_OPENABLE = QJNIObjectPrivate::getStaticObjectField(
+            JniIntentClass, "CATEGORY_OPENABLE", "Ljava/lang/String;");
+    m_intent.callObjectMethod("addCategory", "(Ljava/lang/String;)Landroid/content/Intent;",
+                              CATEGORY_OPENABLE.object());
 }
 
-void QAndroidPlatformFileDialogHelper::setFilter()
+void QAndroidPlatformFileDialogHelper::setAllowMultipleSelections(bool allowMultiple)
 {
+    const QJNIObjectPrivate allowMultipleSelections = QJNIObjectPrivate::getStaticObjectField(
+            JniIntentClass, "EXTRA_ALLOW_MULTIPLE", "Ljava/lang/String;");
+    m_intent.callObjectMethod("putExtra", "(Ljava/lang/String;Z)Landroid/content/Intent;",
+                              allowMultipleSelections.object(), allowMultiple);
 }
 
-QList<QUrl> QAndroidPlatformFileDialogHelper::selectedFiles() const
+void QAndroidPlatformFileDialogHelper::setMimeTypes()
 {
-    return {m_selectedFile};
+    m_intent.callObjectMethod("setType", "(Ljava/lang/String;)Landroid/content/Intent;",
+                              QJNIObjectPrivate::fromString("*/*").object());
+
+    const QJNIObjectPrivate extraMimeType = QJNIObjectPrivate::getStaticObjectField(
+            JniIntentClass, "EXTRA_MIME_TYPES", "Ljava/lang/String;");
+    for (const QString &type : options()->mimeTypeFilters()) {
+        m_intent.callObjectMethod(
+                "putExtra", "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;",
+                extraMimeType.object(), QJNIObjectPrivate::fromString(type).object());
+    }
 }
 
-void QAndroidPlatformFileDialogHelper::selectFile(const QUrl &file)
+QJNIObjectPrivate QAndroidPlatformFileDialogHelper::getFileDialogIntent(const QString &intentType)
 {
-    Q_UNUSED(file)
+    const QJNIObjectPrivate ACTION_OPEN_DOCUMENT = QJNIObjectPrivate::getStaticObjectField(
+            JniIntentClass, intentType.toLatin1(), "Ljava/lang/String;");
+    return QJNIObjectPrivate(JniIntentClass, "(Ljava/lang/String;)V",
+                             ACTION_OPEN_DOCUMENT.object());
 }
 
-QUrl QAndroidPlatformFileDialogHelper::directory() const
+bool QAndroidPlatformFileDialogHelper::show(Qt::WindowFlags windowFlags, Qt::WindowModality windowModality, QWindow *parent)
 {
-    return QUrl();
+    Q_UNUSED(windowFlags)
+    Q_UNUSED(windowModality)
+    Q_UNUSED(parent)
+
+    bool isDirDialog = false;
+
+    if (options()->acceptMode() == QFileDialogOptions::AcceptSave) {
+        m_intent = getFileDialogIntent("ACTION_CREATE_DOCUMENT");
+    } else if (options()->acceptMode() == QFileDialogOptions::AcceptOpen) {
+        switch (options()->fileMode()) {
+        case QFileDialogOptions::FileMode::DirectoryOnly:
+        case QFileDialogOptions::FileMode::Directory:
+            m_intent = getFileDialogIntent("ACTION_OPEN_DOCUMENT_TREE");
+            isDirDialog = true;
+            break;
+        case QFileDialogOptions::FileMode::ExistingFiles:
+            m_intent = getFileDialogIntent("ACTION_OPEN_DOCUMENT");
+            setAllowMultipleSelections(true);
+            break;
+        case QFileDialogOptions::FileMode::AnyFile:
+        case QFileDialogOptions::FileMode::ExistingFile:
+            m_intent = getFileDialogIntent("ACTION_OPEN_DOCUMENT");
+            break;
+        }
+    }
+
+    if (!isDirDialog) {
+        setOpenableCategory();
+        setMimeTypes();
+    }
+
+    setIntentTitle(options()->windowTitle());
+    setLocalFilesOnly(true);
+
+    QtAndroidPrivate::registerActivityResultListener(this);
+    m_activity.callMethod<void>("startActivityForResult", "(Landroid/content/Intent;I)V",
+                              m_intent.object(), REQUEST_CODE);
+    return true;
 }
 
-void QAndroidPlatformFileDialogHelper::setDirectory(const QUrl &directory)
+void QAndroidPlatformFileDialogHelper::hide()
 {
-    Q_UNUSED(directory)
+    if (m_eventLoop.isRunning())
+        m_eventLoop.exit();
+    QtAndroidPrivate::unregisterActivityResultListener(this);
 }
 
-bool QAndroidPlatformFileDialogHelper::defaultNameFilterDisables() const
+void QAndroidPlatformFileDialogHelper::exec()
 {
-    return false;
+    m_eventLoop.exec(QEventLoop::DialogExec);
 }
 }
 
diff --git a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h
index 5cd26af7c9..fa9c3f47b3 100644
--- a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h
+++ b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h
@@ -44,6 +44,8 @@
 #include <QEventLoop>
 #include <qpa/qplatformdialoghelper.h>
 #include <QtCore/private/qjnihelpers_p.h>
+#include <private/qjni_p.h>
+#include <QEventLoop>
 
 QT_BEGIN_NAMESPACE
 
@@ -55,26 +57,34 @@ class QAndroidPlatformFileDialogHelper: public QPlatformFileDialogHelper, public
 
 public:
     QAndroidPlatformFileDialogHelper();
-    void exec() override;
 
-    bool show(Qt::WindowFlags windowFlags,
-              Qt::WindowModality windowModality,
-              QWindow *parent) override;
+    void exec() override;
+    bool show(Qt::WindowFlags windowFlags, Qt::WindowModality windowModality, QWindow *parent) override;
     void hide() override;
 
-    QString selectedNameFilter() const override;
-    void selectNameFilter(const QString &filter) override;
-    void setFilter() override;
-    QList<QUrl> selectedFiles() const override;
-    void selectFile(const QUrl &file) override;
-    QUrl directory() const override;
-    void setDirectory(const QUrl &directory) override;
-    bool defaultNameFilterDisables() const override;
+    QString selectedNameFilter() const override { return QString(); };
+    void selectNameFilter(const QString &filter) override { Q_UNUSED(filter) };
+    void setFilter() override {};
+    QList<QUrl> selectedFiles() const override { return m_selectedFile; };
+    void selectFile(const QUrl &file) override { Q_UNUSED(file) };
+    QUrl directory() const override { return QUrl(); };
+    void setDirectory(const QUrl &directory) override { Q_UNUSED(directory) };
+    bool defaultNameFilterDisables() const override { return false; };
     bool handleActivityResult(jint requestCode, jint resultCode, jobject data) override;
 
 private:
+    QJNIObjectPrivate getFileDialogIntent(const QString &intentType);
+    void takePersistableUriPermission(const QJNIObjectPrivate &uri);
+    void setLocalFilesOnly(bool localOnly);
+    void setIntentTitle(const QString &title);
+    void setOpenableCategory();
+    void setAllowMultipleSelections(bool allowMultiple);
+    void setMimeTypes();
+
     QEventLoop m_eventLoop;
-    QUrl m_selectedFile;
+    QList<QUrl> m_selectedFile;
+    QJNIObjectPrivate m_intent;
+    const QJNIObjectPrivate m_activity;
 };
 
 }
-- 
2.28.0


From d8b2e1e42d314f735af5f761a46a66c50adb9148 Mon Sep 17 00:00:00 2001
From: Assam Boudjelthia <assam.boudjelthia@qt.io>
Date: Tue, 21 Apr 2020 16:42:44 +0300
Subject: [PATCH 5/8] Android: fix mimeTypes handling for file dialog

Since Android native file manager supports mimeTypes, I use
QMimeDatabase to get the correct mime type for the nameFilter
used with the file dialog.

[ChangeLog][Android] Support setting mimetypes and and namefilters for
Android native file dialog.

Task-number: QTBUG-83089
Change-Id: I46545576dc9b51aa872bb37dbf4fe12b2533bdd9
Reviewed-by: Ville Voutilainen <ville.voutilainen@qt.io>
---
 .../org/qtproject/qt5/android/QtNative.java   |  5 ++
 .../qandroidplatformfiledialoghelper.cpp      | 46 ++++++++++++++++---
 2 files changed, 45 insertions(+), 6 deletions(-)

diff --git a/src/android/jar/src/org/qtproject/qt5/android/QtNative.java b/src/android/jar/src/org/qtproject/qt5/android/QtNative.java
index 46be16a154..688c8146bf 100644
--- a/src/android/jar/src/org/qtproject/qt5/android/QtNative.java
+++ b/src/android/jar/src/org/qtproject/qt5/android/QtNative.java
@@ -158,6 +158,11 @@ public class QtNative
         }
     }
 
+    public static String[] getStringArray(String joinedString)
+    {
+        return joinedString.split(",");
+    }
+
     private static Uri getUriWithValidPermission(Context context, String uri, String openMode)
     {
         try {
diff --git a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
index 7b5f2f16f8..2e29a22cf7 100644
--- a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
+++ b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
@@ -42,6 +42,10 @@
 #include <androidjnimain.h>
 #include <jni.h>
 
+#include <QMimeType>
+#include <QMimeDatabase>
+#include <QRegularExpression>
+
 QT_BEGIN_NAMESPACE
 
 namespace QtAndroidFileDialogHelper {
@@ -147,17 +151,47 @@ void QAndroidPlatformFileDialogHelper::setAllowMultipleSelections(bool allowMult
                               allowMultipleSelections.object(), allowMultiple);
 }
 
+QStringList nameFilterExtensions(const QString nameFilters)
+{
+    QStringList ret;
+#if QT_CONFIG(regularexpression)
+    QRegularExpression re("(\\*\\.?\\w*)");
+    QRegularExpressionMatchIterator i = re.globalMatch(nameFilters);
+    while (i.hasNext())
+        ret << i.next().captured(1);
+#endif // QT_CONFIG(regularexpression)
+    ret.removeAll("*");
+    return ret;
+}
+
 void QAndroidPlatformFileDialogHelper::setMimeTypes()
 {
+    QStringList mimeTypes = options()->mimeTypeFilters();
+    const QString nameFilter = options()->initiallySelectedNameFilter();
+
+    if (mimeTypes.isEmpty() && !nameFilter.isEmpty()) {
+        QMimeDatabase db;
+        for (const QString &filter : nameFilterExtensions(nameFilter))
+            mimeTypes.append(db.mimeTypeForFile(filter).name());
+    }
+
+    QString type = !mimeTypes.isEmpty() ? mimeTypes.at(0) : QLatin1String("*/*");
     m_intent.callObjectMethod("setType", "(Ljava/lang/String;)Landroid/content/Intent;",
-                              QJNIObjectPrivate::fromString("*/*").object());
+                              QJNIObjectPrivate::fromString(type).object());
+
+    if (!mimeTypes.isEmpty()) {
+        const QJNIObjectPrivate extraMimeType = QJNIObjectPrivate::getStaticObjectField(
+                JniIntentClass, "EXTRA_MIME_TYPES", "Ljava/lang/String;");
+
+        QJNIObjectPrivate mimeTypesArray = QJNIObjectPrivate::callStaticObjectMethod(
+                "org/qtproject/qt5/android/QtNative",
+                "getStringArray",
+                "(Ljava/lang/String;)[Ljava/lang/String;",
+                QJNIObjectPrivate::fromString(mimeTypes.join(",")).object());
 
-    const QJNIObjectPrivate extraMimeType = QJNIObjectPrivate::getStaticObjectField(
-            JniIntentClass, "EXTRA_MIME_TYPES", "Ljava/lang/String;");
-    for (const QString &type : options()->mimeTypeFilters()) {
         m_intent.callObjectMethod(
-                "putExtra", "(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;",
-                extraMimeType.object(), QJNIObjectPrivate::fromString(type).object());
+                "putExtra", "(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/Intent;",
+                extraMimeType.object(), mimeTypesArray.object());
     }
 }
 
-- 
2.28.0


From 5874c0f3b9093255af0754b279f5bbfa96977c9e Mon Sep 17 00:00:00 2001
From: Assam Boudjelthia <assam.boudjelthia@qt.io>
Date: Mon, 27 Apr 2020 11:51:09 +0300
Subject: [PATCH 6/8] Android: allow file dialog to use remote locations

Allow the native file dialog to use remote locations like OneDrive,
Google Drive, etc.

Pick-to: 5.15
Change-Id: I67027f0da8e6bd759a4936e03b6c9e95f3f90e1a
Reviewed-by: Andy Shaw <andy.shaw@qt.io>
---
 .../android/qandroidplatformfiledialoghelper.cpp         | 9 ---------
 .../platforms/android/qandroidplatformfiledialoghelper.h | 1 -
 2 files changed, 10 deletions(-)

diff --git a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
index 2e29a22cf7..689997f1eb 100644
--- a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
+++ b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
@@ -118,14 +118,6 @@ void QAndroidPlatformFileDialogHelper::takePersistableUriPermission(const QJNIOb
                                      uri.object(), modeFlags);
 }
 
-void QAndroidPlatformFileDialogHelper::setLocalFilesOnly(bool localOnly)
-{
-    const QJNIObjectPrivate extraLocalOnly = QJNIObjectPrivate::getStaticObjectField(
-            JniIntentClass, "EXTRA_LOCAL_ONLY", "Ljava/lang/String;");
-    m_intent.callObjectMethod("putExtra", "(Ljava/lang/String;Z)Landroid/content/Intent;",
-                              extraLocalOnly.object(), localOnly);
-}
-
 void QAndroidPlatformFileDialogHelper::setIntentTitle(const QString &title)
 {
     const QJNIObjectPrivate extraTitle = QJNIObjectPrivate::getStaticObjectField(
@@ -237,7 +229,6 @@ bool QAndroidPlatformFileDialogHelper::show(Qt::WindowFlags windowFlags, Qt::Win
     }
 
     setIntentTitle(options()->windowTitle());
-    setLocalFilesOnly(true);
 
     QtAndroidPrivate::registerActivityResultListener(this);
     m_activity.callMethod<void>("startActivityForResult", "(Landroid/content/Intent;I)V",
diff --git a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h
index fa9c3f47b3..5a7a28a8a0 100644
--- a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h
+++ b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.h
@@ -75,7 +75,6 @@ public:
 private:
     QJNIObjectPrivate getFileDialogIntent(const QString &intentType);
     void takePersistableUriPermission(const QJNIObjectPrivate &uri);
-    void setLocalFilesOnly(bool localOnly);
     void setIntentTitle(const QString &title);
     void setOpenableCategory();
     void setAllowMultipleSelections(bool allowMultiple);
-- 
2.28.0


From 5992cadc7d090d53c53040d84b0d3d9b08e1f76e Mon Sep 17 00:00:00 2001
From: Andy Shaw <andy.shaw@qt.io>
Date: Tue, 12 May 2020 14:06:35 +0200
Subject: [PATCH 7/8] Android: Clear the m_selectedFile variable when showing
 again

Since the helper is being reused then the m_selectedFile variable should
be cleared, otherwise it ends up appending the new result to the old
one.

Change-Id: I72c24409dc91f91bad55a7da2772605f03fb4623
Pick-to: 5.15
Reviewed-by: Assam Boudjelthia <assam.boudjelthia@qt.io>
---
 .../platforms/android/qandroidplatformfiledialoghelper.cpp      | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
index 689997f1eb..21e0c47909 100644
--- a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
+++ b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
@@ -203,6 +203,8 @@ bool QAndroidPlatformFileDialogHelper::show(Qt::WindowFlags windowFlags, Qt::Win
 
     bool isDirDialog = false;
 
+    m_selectedFile.clear();
+
     if (options()->acceptMode() == QFileDialogOptions::AcceptSave) {
         m_intent = getFileDialogIntent("ACTION_CREATE_DOCUMENT");
     } else if (options()->acceptMode() == QFileDialogOptions::AcceptOpen) {
-- 
2.28.0


From da6c567ed1d317faa98fc1c1afee643a803b04db Mon Sep 17 00:00:00 2001
From: Andy Shaw <andy.shaw@qt.io>
Date: Thu, 18 Jun 2020 09:18:46 +0200
Subject: [PATCH 8/8] Android: Only emit the signals once when doing multiple
 file selection

Change-Id: Ie57908f5e882ef4f85f4199ecb06c09ae5d8ae2a
Pick-to: 5.15
Reviewed-by: BogDan Vatra <bogdan@kdab.com>
---
 .../platforms/android/qandroidplatformfiledialoghelper.cpp    | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
index 21e0c47909..6bb3372380 100644
--- a/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
+++ b/src/plugins/platforms/android/qandroidplatformfiledialoghelper.cpp
@@ -94,9 +94,9 @@ bool QAndroidPlatformFileDialogHelper::handleActivityResult(jint requestCode, ji
             QJNIObjectPrivate itemUri = item.callObjectMethod("getUri", "()Landroid/net/Uri;");
             takePersistableUriPermission(itemUri);
             m_selectedFile.append(itemUri.toString());
-            Q_EMIT filesSelected(m_selectedFile);
-            Q_EMIT accept();
         }
+        Q_EMIT filesSelected(m_selectedFile);
+        Q_EMIT accept();
     }
 
     return true;
-- 
2.28.0

